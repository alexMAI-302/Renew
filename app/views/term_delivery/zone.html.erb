<% content_for :stylesheets do %>
		#wrapper
		{
			padding: 20px 1%;
			width: 98%;
			float:left;
			display: block;
		}

<% end %>

<% content_for :js do %>
    <script src="http://api-maps.yandex.ru/2.0/?load=package.full&mode=debug&lang=ru-RU" type="text/javascript"></script>
	<%= javascript_include_tag :defaults %>
    <script type="text/javascript">
		var pp = <%= @rst_new %>,
			rr = <%= @route_json %>,
			jzt = <%= @jzt %>,
			polygons = [],
			current_route = <%= @route_index %>,
			style1 = 
			{
				// - цвет и прозрачность линии
				strokeColor: "ffff0088",
				// - цвет и прозрачность заливки
				fillColor: "ff000055"
			},
			style2 = 
			{
				// - цвет и прозрачность заливки
				fillColor: "ffff0055"
			},
			map,
			geoPoints=new ymaps.GeoObjectCollection(),
			center=[55.76, 37.64];
		ymaps.ready(function(){
            // Создание экземпляра карты и его привязка к созданному контейнеру
            map = new ymaps.Map("YMapsID",
            	{
			        // Центр карты
			        center: center,
			        zoom: 10,
			        // Тип карты
			        type: "yandex#map",
			        behaviors: ["default", "scrollZoom"]
			    }
			);

			 // Добавление элементов управления
            map.controls.add("zoomControl");
            map.controls.add("typeSelector");
            map.controls.add("mapTools");
			
			map.geoObjects.add(geoPoints);
			
			for (var i = 0; i < rr.length; i++) {
				polygons[i] = new ymaps.Polygon(
						(rr[i].points != null && rr[i].points!="")?
						ymaps.geometry.Polygon.fromEncodedCoordinates(rr[i].points):
						[[center]],
						{balloonContent: rr[i].name},
						style1
					);
				map.geoObjects.add(polygons[i]);
				polygons[i].events.add("geometrychange", function () {
					set_points();
				});
            }
			slavesel(current_route);
        });
		
		function set_points() {
			var cc = 0, route_points=[]; points_ids="", geometry=polygons[current_route].geometry, isEmpty=isEmptyGeometry(geometry);
			$('a_points').value =  isEmpty? "" : ymaps.geometry.Polygon.toEncodedCoordinates(geometry);
			rr[current_route].points = $('a_points').value;
			if(!isEmpty){
				for (var i = 0; i < pp.length; i++) {
					if (pp[i].latitude!=null && pp[i].longitude!=null && geometry.contains([pp[i].latitude, pp[i].longitude])) {
						$('a_lroute').value = $('a_lroute').value + pp[i].id + ", ";
						cc++;
					}
				}
				points_ids=route_points.join();				
			}
			$('a_cc').value = cc;
		};
		
		function isEmptyGeometry(geometry){
			var points=(geometry!=null)?geometry.get(0):null;
			return (points==null || ((points.length==2) && (points[0][0]==points[1][0] && points[0][1]==points[1][1])));
		};
		
		function slavesel( v ){
			$('a_routeid').value = rr[v].id;
			polygons[current_route].editor.stopEditing();
			polygons[current_route].options.set("fillColor", style1.fillColor);
			rr[current_route].points = $('a_points').value;
			current_route = v;
			geoPoints.removeAll();
			for (var i = 0; i < jzt.length; i++) {
				if (rr[v].id == jzt[i].zid) {
					geoPoints.add(
						new ymaps.Placemark(
							[jzt[i].latitude, jzt[i].longitude], 
							{
								draggable: false,
								balloonMaxWidth: 100,
								balloonAutoPan: true,
								balloonContent: jzt[i].pname 
							},
							{
								preset: "twirl#bankIcon",
							}
						)
					);
				};
			};
			polygons[current_route].editor.startEditing();
			polygons[current_route].options.set("fillColor", style2.fillColor);
			
			set_points();
			
			if(!isEmptyGeometry(polygons[current_route].geometry)){
				map.setBounds(polygons[current_route].geometry.getBounds());
			} else {
				var points=(polygons[current_route].geometry!=null)?polygons[current_route].geometry.getCoordinates()[0]:[];
				map.setCenter((points.length>=1? points[0] : center), 10);
			}
		};
	</script>
<% end %>

<% content_for :title do %>
Определение зон терминалов
<% end %>

<% content_for :content do %>
	<div id="groupselect">
		<% form_tag do %>
			<fieldset>
				<legend>Настройки</legend>
				<table>
					<tr>
						<td><b>Дилер:</b> </td>
						<td><%=  select(:post, :subdealer, @site_list, {:selected => @subdealer}) %>	</td>
						<td><b>Тип зоны:</b> </td>
						<td><%=  select(:post, :spv_id, @spv_list, {:selected => @spv_id}) %>
						<%= submit_tag 'Выбрать' %>
						</td>
					</tr>
					<tr>
						<td><b>Зона:</b> </td>
						<td><%=  select(:post, :route, @route_list, {:selected => @route_index}, {:onchange => "slavesel(this.value)"}) %>
						</td>
						<td></td>
						<td></td>
					</tr>
				</table>	
			</fieldset>			
		<% end %> 
	</div>
	<div id="map">
		<p><b>Укажите вершины зоны:</b></p>
		<div id="YMapsID"></div>
		<% form_tag :action => 'save_zone' do %>
			<p><b>Терминалов в зоне:</b>
			<%= text_field(:a, :cc, :size => "15",  :value => 0, :class => "w30px", :align => "center", :readonly => 'true') %>	
			<input type="submit" value="Сохранить"></p>
			<%= hidden_field(:a, :points,  :size => "100", :value => @route_points, :class => "encode-points", :readonly => 'true') %>	
			
			<%= hidden_field(:a, :lroute,  :size => "100", :value => "", :class => "l-route", :readonly => 'true') %>
			
			<%= hidden_field(:a, :routeid, :size => "30",  :value => @route_id, :class => "routeid", :readonly => 'true') %>	
			
		<% end %>
	</div>
<% end %>