<% content_for :js do %>
    <script src="http://api-maps.yandex.ru/2.0/?load=package.full&mode=debug&lang=ru-RU" type="text/javascript"></script>
	<%= javascript_include_tag :defaults %>
    <script type="text/javascript">
		var Base64 = new function () {
			var _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=";

			this.encode4bytes = function (x) {
				var chr = [];
				for (var i = 0; i < 4; i++) {
					chr[i] = x & 0x000000ff;
					x = x >> 8;
				}
				return chr;
			}

			this.encode = function (input) {
				var output = "",
					chr1, chr2, chr3, enc1, enc2, enc3, enc4,
					i = 0,
					inputIsString = typeof input == "string";

				while (i < input.length) {
					chr1 = input[i++];
					chr2 = input[i++];
					chr3 = input[i++];
					
					enc1 = chr1 >> 2
					enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
					enc3 = ((chr2 & 15) << 2) | (chr3 >> 6)
					enc4 = chr3 & 63;
					
					if (isNaN(chr2)) {
						enc3 = enc4 = 64;
					} else if (isNaN(chr3)) {
						enc4 = 64;
					}      

					output +=
						_keyStr.charAt(enc1) + _keyStr.charAt(enc2) +
						_keyStr.charAt(enc3) + _keyStr.charAt(enc4);
						
				}

				return output;
			}
		};
		
		// Кодирование точек ломанной
		function encodePoints (points) {
			var array = [],		// Временный массив для точек
				prev = [0, 0],	// Предыдущая точка
				coef = 1000000;	// Коэффициент

			// Обработка точек
			for (var i = 0, geoVector, currentPoint; i < points.length; i++) {

				// Нахождение смещение относительно предыдущей точки
				geoVector = [points[i][1]-prev[1], points[i][0]-prev[0]];

				// Умножение каждой координаты точки на коэффициент и кодирование
				array = array.concat(Base64.encode4bytes(geoVector[0] * coef), Base64.encode4bytes(geoVector[1] * coef));
				prev = points[i];
			}

			// Весь массив кодируется в Base64
			return Base64.encode(array);
		};
		
		function encode2(points){
			return ymaps.geometry.Polygon.toEncodedCoordinates(new ymaps.geometry.Polygon([points]));
		};
		
		function showSpinner(){
			$('spinner').show();
			$('mainform').hide();
		};
		
		function hideSpinner(){
			$('spinner').hide();
			$('mainform').show();
		};
		
		function loadPoints(value){
			showSpinner();
			<%= remote_function :url =>{ :action => "points_string_get" }, :with => "'site=' + $('site').value", :update => "points", :complete => "hideSpinner();" %>
		};
		
		function makeData(){
			showSpinner();
			switch($('operation').value){
				case "1":
					for(var i=0; i<$('points_quantity').value; i++){
						$('new_value['+i+']').value=encode2(eval('('+$('points_string['+i+']').value+')'));
					}
				break;
				case "2":
					for(var i=0; i<$('points_quantity').value; i++){
						$('new_value['+i+']').value=encodePoints(eval('('+$('points_string['+i+']').value+')'));
					}
				break;
			}
		};
	</script>
<%	end -%>
<% content_for :body_attrs do %>
onload="loadPoints(1);"
<%	end -%>
<% content_for :title do %>
Координаты торговых точек
<%	end -%>
<% content_for :content do %>
	<% form_remote_tag( {:url => '/convert_base64/points_string_save', :html => {:onsubmit => "makeData()"}, :complete => "hideSpinner();" }) do %>
		<%= image_tag('ajax-loader.gif', :id => 'spinner', :style => 'display:none') %>
		<div id="mainform">
			<table>
				<tr>
					<td>
						База
					</td>
					<td>
						<select id="site" name="site" value="1" onchange="loadPoints(value);">
							<option value="1">Основная база</option>
							<option value="4">Электросталь</option>
						</select>
					</td>
				</tr>
				<tr>
					<td>
						Преобразование
					</td>
					<td>
						<select id="operation" name="operation">
							<option value="1">API 2.0</option>
							<option value="2">API 1.x</option>
						</select>
					</td>
				</tr>
			</table>
			<%= submit_tag "Преобразовать" %> 					
		</div>
		<div id="points">
			<%= render :partial => "points" %>
		</div>
	<% end %>
<% end -%>
<% render :file => 'layouts/application' %>